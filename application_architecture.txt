Цель приложения:

Предоставить пользователю (радиоастроному или руководителю РСДБ проекта) гибкие возможности по настройке, планированию и оптимизации научных наблюдений 
с визуализацией различных параметров этих наблюдений, а также с функционалом WYISWYG редактированием наблюдений и поддержкой потоковой работы с большим количеством наблюдений через
командную строку/Python скрипты.

Архитекутра кода приложения должна быть максимально гибкой с точки зрения последующего наращивания функционала.
Для этого я придумал базовые классы и супер классы. Подходит ли такое решение?

Архитектура приложения:
1) Оперирует с помощью супер-классов базовыми классами, осуществляет взаимодействие с пользователем через графический интерфейс (pySide6) или через командную строку/Python скрипты.
2) Поддерживается два способа работы с приложением (неважно это командная строка или GUI): standalone на ПК пользователя, система сервер-клиент (можно через контейнер).
В системе сервер-клиент в качестве GUI используется веб-интерфейс -- точно такой же, как GUI standalon (pySide6)
3) Условно по функционалу можно разделить на два общих направления: работа с одиночным наблюдением, работа с серией наблюдений.

В основе своей приложение использует супер-классы и базовые классы.

В приложении интерфейсно главной входной точкой является Project, который может состоять из одного или нескольких наблюдений.

Базовые классы:
Observations -- наблюдение, главенствующий класс, который содержит Telescopes, Sources, Scans, Frequencies
Telescope, Telescopes -- телескоп и массив телескопов
IF, Frequencies -- частота наблюдений и массив частот
Scan, Scans -- временные сегменты наблюдений (сканы) и массив наблюдений (сканов) -- Scans -- скан содержит в себе источник, перечень телескопов и частот, а также время начала наблюдений и длительность -- это единичный сегмент наблюдения Observation
Source, Sources -- источник Source и массив источников (Sources)

Супер-классы:
Супер-классы называются так, потому что главенствуют над базовыми классами и оперируют ими различными своими методами.
Классы реализованы гибридно (абстрактный+методы по умолчанию).
Manipulator -- супер-класс манипулятор, главенствующий класс. Основная задача супер-класса Manipulator -- дирижирует остальными супер-классами и управляет Project.
Configurator -- супер-класс конфигуратор, работает с Project и входящими в него Observation. 

Задачами супер-класса Configurator являются:
1) Чтение и хранение каталогов источников и телескопов
2) Конфигурирование наблюдений, т.е. редактирование всех свойств Observations:
	- добавление и удаление телескопов, сканов, источников, частот в наблюдение
	- редактирование/конфигурирование сканов (телескопы в скане, время начала и продолжительность скана, наблюдаемый источник в скане)
	- активация/деактивация тех или иных телескопов, источников, частот и т.д.
3) Конфигурирование можно осуществлять:
	- вручную (т.е. случай, когда пользователь через GUI или через CLI интерфейсы, или через составление JSON файла вручную конфигурирует наблюдение или несколько наблюдений)
	- потоково по правилам (по выборке источников, по выборке телескопов, по датам, по времени и по другим параметрам, которые можно получить из Calculator или Optimizator)
3) Сохранение/загрузка абсолютно всех параметров, которые отражены в Project в формате JSON
(туда входят все параметры и конфигурация Observations, правила, по которым осуществляется потоковая конфигурация (где применимо), результаты работы супер-классов Calculator, Vizualizator, Optimizator)

Задачами супер-класса Vizualizator являются:
1) Визуализация любых свойств, параметров Project, Observation, а также визуализация результатов, получаемых через Calculator, Optimizator, Configurator

Задачами супер-класса Optimizator являются:
1) Оптимизация наблюдений или наблюдения по различным критериям.

Задачами супер-класса Calculator являются:
1) Расчеты всех дополнительных параметрых, которые можно выполнить по имеющимся параметрам наблюдений Observations проекта Project.
-- видимость источника на каждом телескопе (неважно космический он или наземный, может потребоваться дополнительная информация по угловым ограничениям на каждый телескоп)
-- углы наземных и космических телескопов: например, положение наземных телескопов над горизонтом, поля зрения телескопов
-- чувствительность интерферометрических баз в наблюдениях Observations из Project (требуется ввод дополнительных данных -- SEFD телескопов для заданных частотных диапазонов из Frequencies наблюдений)
2) Расчеты можно делать массово по правилам, либо точечно для конкретных наблюдений или для конкретных параметров наблюдения

Вся требуемая дополнительная информация (которая может понадобиться для всех супер-классов) может быть введена через соответствующие поля либо загружена через JSON формат.
В итоге вся информация хранится в JSON формате файла проекта Project -- всё, всё, всё -- результаты конфигуратора, манипулятора, настройки и параметры абсолютно всех наблюдений, которые содержаться

ВАЖНО: Для конфигурации наблюдений, нам нужны еще каталоги телескопов и каталоги источников (из внешних файлов). В какой класс это всё запихнуть? (в том числе методы чтения и работы с каталогами)

Базовые классы находятся в папке base
Супер-классы находятся в папке super
Графический интерфейс находится в папке gui
Интерфейс командной строки находится в папке cli